{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","App","_useState","useState","_useState2","_slicedToArray","recipient","setRecipient","_useState3","_useState4","message","setMessage","_useState5","_useState6","allMessages","setAllMessages","_useState7","_useState8","contract","setContract","_useState9","_useState10","account","setAccount","_useState11","_useState12","error","setError","_useState13","_useState14","senders","setSenders","_useState15","_useState16","selectedSender","setSelectedSender","useEffect","init","_ref","_asyncToGenerator","_callee","web3","accounts","networkId","deployedNetwork","instance","_context","Web3","window","ethereum","request","eth","getAccounts","net","getId","MessageStoreContract","networks","Contract","abi","address","console","t0","apply","arguments","on","removeListener","sendMessage","_ref2","_callee2","gasEstimate","_context2","alert","methods","estimateGas","from","send","gas","fetchMessages","_ref3","_callee3","receivedMessages","uniqueSenders","_context3","fetchMessagesForLoggedInAccount","_toConsumableArray","Set","map","msg","sender","fetchMessagesForSender","_ref4","_callee4","sentMessages","formattedReceivedMessages","formattedSentMessages","combinedMessages","_context4","_objectSpread","timestamp","direction","concat","sort","b","_x","React","createElement","className","onClick","index","key","content","Date","toLocaleTimeString","hour","minute","onChange","target","placeholder","style","color","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29ad3f7c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport MessageStoreContract from '../abis/MessageStore.json';\nimport './App.css';\n\nconst App = () => {\n    const [recipient, setRecipient] = useState('');\n    const [message, setMessage] = useState('');\n    const [allMessages, setAllMessages] = useState([]);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState('');\n    const [error, setError] = useState('');\n    const [senders, setSenders] = useState([]);\n    const [selectedSender, setSelectedSender] = useState(null);\n\n    useEffect(() => {\n        const init = async () => {\n            try {\n                const web3 = new Web3(window.ethereum);\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\n                const accounts = await web3.eth.getAccounts();\n                setAccount(accounts[0]);\n\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = MessageStoreContract.networks[networkId];\n\n                if (deployedNetwork) {\n                    const instance = new web3.eth.Contract(\n                        MessageStoreContract.abi,\n                        deployedNetwork.address,\n                    );\n                    setContract(instance);\n                } else {\n                    console.error(\"Contract not found on the network:\", networkId);\n                    setError(\"Contract not deployed on this network\");\n                }\n            } catch (error) {\n                console.error(\"Initialization Error:\", error);\n                setError(error.message);\n            }\n        };\n\n        init();\n\n        window.ethereum.on('accountsChanged', init);\n        window.ethereum.on('networkChanged', init);\n\n        return () => {\n            window.ethereum.removeListener('accountsChanged', init);\n            window.ethereum.removeListener('networkChanged', init);\n        };\n    }, []);\n\n    const sendMessage = async () => {\n        if (!recipient || !message) {\n            alert(\"Both recipient and message fields are required.\");\n            return;\n        }\n\n        if (contract) {\n            try {\n                const gasEstimate = await contract.methods.sendMessage(recipient, message).estimateGas({ from: account });\n                await contract.methods.sendMessage(recipient, message).send({ from: account, gas: gasEstimate + 100000 });\n                alert(\"Message sent!\");\n                setMessage('');\n                setRecipient('');\n                fetchMessages(); // Refresh the senders after sending a message\n            } catch (error) {\n                console.error(\"Transaction Error:\", error);\n                alert(\"Transaction failed: \" + error.message);\n                setError(error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessages = async () => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\n                setSenders(uniqueSenders);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n                alert(\"Error fetching messages: \" + error.message);\n                setError(error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessagesForSender = async (sender) => {\n        if (contract) {\n            try {\n                // Fetch messages received from the selected sender to your account\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\n    \n                // Fetch messages sent from your account to the selected sender\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\n    \n                // Format received messages\n                const formattedReceivedMessages = receivedMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000, // Convert to milliseconds for proper date formatting\n                    direction: 'received',  // Mark these as received messages\n                }));\n    \n                // Format sent messages\n                const formattedSentMessages = sentMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,  // Convert to milliseconds\n                    direction: 'sent',  // Mark these as sent messages\n                }));\n    \n                // Combine both sent and received messages into one array\n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\n    \n                // Sort the combined messages by timestamp in chronological order\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\n    \n                // Update state with combined and sorted messages\n                setAllMessages(combinedMessages);\n    \n                // Set the selected sender for display\n                setSelectedSender(sender);\n            } catch (error) {\n                console.error(\"Error fetching messages for sender:\", error);\n                alert(\"Error fetching messages for sender: \" + error.message);\n                setError(error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n    \n    \n\n    return (\n        <div className=\"app\">\n            {/* Sidebar with Contacts */}\n            <div className=\"sidebar\">\n                <h3>Contacts</h3>\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\n                <ul className=\"senders-list\">\n                    {senders.length > 0 ? (\n                        senders.map((sender, index) => (\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\n            \n                                <span>{sender}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li>No contacts available.</li>\n                    )}\n                </ul>\n            </div>\n    \n            {/* Chat Area */}\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\n                </div>\n                <div className=\"chat-window\">\n                    <ul className=\"messages\">\n                        {allMessages.length > 0 ? (\n                            allMessages.map((msg, index) => (\n                                <li key={index} className={`message ${msg.direction}`}>\n                                    <p>{msg.content}</p>\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n                                </li>\n                            ))\n                        ) : (\n                            <li>No messages found.</li>\n                        )}\n                    </ul>\n                </div>\n    \n                {/* Message Input Area */}\n                <div className=\"input-area\">\n                    <input\n                        type=\"text\"\n                        value={recipient}\n                        onChange={(e) => setRecipient(e.target.value)}\n                        placeholder=\"Enter Recipient Ethereum Address\"\n                        className=\"recipient-input\"\n                    />\n                </div>\n                <div className=\"input-area\">\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        placeholder=\"Enter Message\"\n                        className=\"message-input\"\n                    />\n                    <button onClick={sendMessage} className=\"send-button\">Send</button>\n                </div>\n                {error && <p style={{ color: 'red' }}>{error}</p>}\n            </div>\n        </div>\n    );\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}