{"version":3,"sources":["components/AddContactPage.js","components/App.js","components/MainApp.js","index.js"],"names":["AddContactPage","React","createElement","className","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","this","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","App","_useState","useState","_useState2","_slicedToArray","recipient","setRecipient","_useState3","_useState4","message","setMessage","_useState5","_useState6","allMessages","setAllMessages","_useState7","_useState8","contract","setContract","_useState9","_useState10","account","setAccount","_useState11","_useState12","error","setError","_useState13","_useState14","senders","setSenders","_useState15","_useState16","selectedSender","setSelectedSender","navigate","useNavigate","useEffect","init","_ref","_asyncToGenerator","_callee","web3","accounts","networkId","deployedNetwork","instance","_context","Web3","window","ethereum","request","eth","getAccounts","net","getId","MessageStoreContract","networks","Contract","abi","address","console","t0","apply","arguments","on","removeListener","sendMessage","_ref2","_callee2","gasEstimate","_context2","alert","methods","estimateGas","from","send","gas","fetchMessages","_ref3","_callee3","receivedMessages","uniqueSenders","_context3","fetchMessagesForLoggedInAccount","_toConsumableArray","Set","map","msg","sender","fetchMessagesForSender","_ref4","_callee4","sentMessages","formattedReceivedMessages","formattedSentMessages","combinedMessages","_context4","_objectSpread","timestamp","direction","concat","sort","b","_x","onClick","index","key","content","Date","toLocaleTimeString","hour","minute","onChange","target","placeholder","style","color","MainApp","Routes","Route","path","element","ReactDOM","render","StrictMode","HashRouter","document","getElementById"],"mappings":"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","file":"static/js/main.9ecbe454.chunk.js","sourcesContent":["import React from 'react';\n\nconst AddContactPage = () => {\n    return (\n        <div className=\"add-contact-page\">\n            <h1>Hello, this is the contact page</h1>\n            {/* You can add your form or additional content here for adding contacts */}\n        </div>\n    );\n};\n\nexport default AddContactPage;\n","// App.js\nimport React, { useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport MessageStoreContract from '../abis/MessageStore.json';\nimport './App.css';\nimport { useNavigate } from 'react-router-dom'; // Do not import BrowserRouter or Router here\nimport AddContactPage from './AddContactPage'; // Import your AddContactPage component\n\nconst App = () => {\n    const [recipient, setRecipient] = useState('');\n    const [message, setMessage] = useState('');\n    const [allMessages, setAllMessages] = useState([]);\n    const [contract, setContract] = useState(null);\n    const [account, setAccount] = useState('');\n    const [error, setError] = useState('');\n    const [senders, setSenders] = useState([]);\n    const [selectedSender, setSelectedSender] = useState(null);\n\n    const navigate = useNavigate();\n\n    const goToAddContactPage = () => {\n        navigate('/add-contact');\n    };\n\n    useEffect(() => {\n        const init = async () => {\n            try {\n                const web3 = new Web3(window.ethereum);\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\n                const accounts = await web3.eth.getAccounts();\n                setAccount(accounts[0]);\n\n                const networkId = await web3.eth.net.getId();\n                const deployedNetwork = MessageStoreContract.networks[networkId];\n\n                if (deployedNetwork) {\n                    const instance = new web3.eth.Contract(\n                        MessageStoreContract.abi,\n                        deployedNetwork.address,\n                    );\n                    setContract(instance);\n                } else {\n                    console.error(\"Contract not found on the network:\", networkId);\n                    setError(\"Contract not deployed on this network\");\n                }\n            } catch (error) {\n                console.error(\"Initialization Error:\", error);\n                setError(error.message);\n            }\n        };\n\n        init();\n\n        window.ethereum.on('accountsChanged', init);\n        window.ethereum.on('networkChanged', init);\n\n        return () => {\n            window.ethereum.removeListener('accountsChanged', init);\n            window.ethereum.removeListener('networkChanged', init);\n        };\n    }, []);\n\n    const sendMessage = async () => {\n        if (!recipient || !message) {\n            alert(\"Both recipient and message fields are required.\");\n            return;\n        }\n\n        if (contract) {\n            try {\n                const gasEstimate = await contract.methods.sendMessage(recipient, message).estimateGas({ from: account });\n                await contract.methods.sendMessage(recipient, message).send({ from: account, gas: gasEstimate + 100000 });\n                alert(\"Message sent!\");\n                setMessage('');\n                setRecipient('');\n                fetchMessages(); // Refresh the senders after sending a message\n            } catch (error) {\n                console.error(\"Transaction Error:\", error);\n                alert(\"Transaction failed: \" + error.message);\n                setError(error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessages = async () => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForLoggedInAccount().call({ from: account });\n                const uniqueSenders = [...new Set(receivedMessages.map(msg => msg.sender))];\n                setSenders(uniqueSenders);\n            } catch (error) {\n                console.error(\"Error fetching messages:\", error);\n                alert(\"Error fetching messages: \" + error.message);\n                setError(error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    const fetchMessagesForSender = async (sender) => {\n        if (contract) {\n            try {\n                const receivedMessages = await contract.methods.fetchMessagesForSender(sender).call({ from: account });\n                const sentMessages = await contract.methods.fetchMessagesForSender(account).call({ from: sender });\n\n                const formattedReceivedMessages = receivedMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'received',\n                }));\n\n                const formattedSentMessages = sentMessages.map(msg => ({\n                    ...msg,\n                    timestamp: msg.timestamp * 1000,\n                    direction: 'sent',\n                }));\n\n                const combinedMessages = [...formattedReceivedMessages, ...formattedSentMessages];\n                combinedMessages.sort((a, b) => a.timestamp - b.timestamp);\n\n                setAllMessages(combinedMessages);\n                setSelectedSender(sender);\n            } catch (error) {\n                console.error(\"Error fetching messages for sender:\", error);\n                alert(\"Error fetching messages for sender: \" + error.message);\n                setError(error.message);\n            }\n        } else {\n            alert(\"Contract not initialized.\");\n        }\n    };\n\n    return (\n        <div className=\"app\">\n            {/* Sidebar with Contacts */}\n            <div className=\"sidebar\">\n                <h3>Contacts</h3>\n                <button onClick={fetchMessages} className=\"fetch-button\">Show Contacts</button>\n                <ul className=\"senders-list\">\n                    {senders.length > 0 ? (\n                        senders.map((sender, index) => (\n                            <li key={index} onClick={() => fetchMessagesForSender(sender)}>\n                                <span>{sender}</span>\n                            </li>\n                        ))\n                    ) : (\n                        <li>No contacts available.</li>\n                    )}\n                </ul>\n            </div>\n\n            {/* Chat Area */}\n            <div className=\"chat-container\">\n                <div className=\"chat-header\">\n                    <h2>Messages for: {selectedSender || \"Select a Sender\"}</h2>\n                    <button onClick={goToAddContactPage} className=\"addcontact-button\">Add New Contact</button>\n                </div>\n                <div className=\"chat-window\">\n                    <ul className=\"messages\">\n                        {allMessages.length > 0 ? (\n                            allMessages.map((msg, index) => (\n                                <li key={index} className={`message ${msg.direction}`}>\n                                    <p>{msg.content}</p>\n                                    <span className=\"timestamp\">{new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n                                </li>\n                            ))\n                        ) : (\n                            <li>No messages found.</li>\n                        )}\n                    </ul>\n                </div>\n\n                {/* Message Input Area */}\n                <div className=\"input-area\">\n                    <input\n                        type=\"text\"\n                        value={recipient}\n                        onChange={(e) => setRecipient(e.target.value)}\n                        placeholder=\"Enter Recipient Ethereum Address\"\n                        className=\"recipient-input\"\n                    />\n                </div>\n                <div className=\"input-area\">\n                    <input\n                        type=\"text\"\n                        value={message}\n                        onChange={(e) => setMessage(e.target.value)}\n                        placeholder=\"Enter Message\"\n                        className=\"message-input\"\n                    />\n                    <button onClick={sendMessage} className=\"send-button\">Send</button>\n                </div>\n                {error && <p style={{ color: 'red' }}>{error}</p>}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// MainApp.js\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom'; // Remove HashRouter import\nimport App from './App'; // Your main component\nimport AddContactPage from './AddContactPage'; // Assuming you have an AddContactPage component\n\nconst MainApp = () => {\n    return (\n        <Routes>\n            <Route path=\"/\" element={<App />} />\n            <Route path=\"/add-contact\" element={<AddContactPage />} />\n        </Routes>\n    );\n};\n\nexport default MainApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'; // Import HashRouter\nimport MainApp from './components/MainApp.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter> {/* Wrap your app in HashRouter */}\n      <MainApp />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}